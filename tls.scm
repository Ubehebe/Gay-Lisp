(define (atom? x) (not (or (pair? x) (null? x))))

(define (run-tests tests)
  (define (run-tests-tail tests num-tests num-failures)
    (if (null? tests)
	(begin (display num-tests)
	       (display " tests, ")
	       (display num-failures)
	       (display " failures")
	       (display #\newline))
	(let* ((cur-test (car tests))
	       (input (car cur-test))
	       (expected-output (cdr cur-test))
	       (actual-output (eval input (interaction-environment))))
	  (if (equal? expected-output actual-output)
	      (run-tests-tail (cdr tests) (+ 1 num-tests) num-failures)
	      (begin (display "error evaluating ")
		     (display input)
		     (display ": expected ")
		     (display expected-output)
		     (display ", got ")
		     (display actual-output)
		     (display #\newline)
		     (run-tests-tail
		      (cdr tests)
		      (+ 1 num-tests)
		      (+ 1 num-failures)))))))
  (run-tests-tail tests 0 0))

(define ch1-tests
  '(
    ((atom? 'atom) . #t)
    ((atom? 'turkey) . #t)
    ((atom? 1492) . #t)
    ((atom? 'u) . #t)
    ((atom? '*abc$) . #t)
    ((list? '(atom)) . #t)
    ((list? '(atom turkey or)) . #t)
    ((list? '((atom turkey) or)) . #t)
    ((length '(how are you doing so far)) . 6)
    ((list? '(((how) are) ((you) (doing so)) far)) . #t)
    ((length '(((how) are) ((you) (doing so)) far)) . 3)
    ((list? '()) . #t)
    ((atom? '()) . #f)
    ((list? '(() () () ())) . #t)
    ((car '(a b c)) . a)
    ((car '((a b c) x y z)) . (a b c))
					;((car 'hotdog) . 'error)
					;((car '()) . 'error)
    ((car '(((hotdogs)) (and) (pickle) relish)) . ((hotdogs)))
    ((car (car '(((hotdogs)) (and)))) . (hotdogs))
    ((cdr '(a b c)) . (b c))
    ((cdr '((a b c) x y z)) . (x y z))
					;  ((cdr 'hamburger) . 'error)
    ((cdr '((x) t r)) . (t r))
					;  ((cdr 'hotdogs) . 'error)
					;  ((cdr '()) . 'error)
    ((car (cdr '((b) (x y) ((c))))) . (x y))
    ((cdr (cdr '((b) (x y) ((c))))) . (((c))))
					;  ((cdr (car '(a (b (c)) d))) . 'error)
    ((cons 'peanut '(butter and jelly)) . (peanut butter and jelly))
    ((cons '(banana and) '(peanut butter and jelly)) . ((banana and) peanut butter and jelly))
    ((cons '((help) this) '(is very ((hard) to learn))) . (((help) this) is very ((hard) to learn)))
    ((cons '(a b (c)) '()) . ((a b (c))))
    ((cons 'a '()) . (a))
    ((cons '((a b c)) 'b) . (((a b c)) . b))
    ((cons 'a 'b) . (a . b))
    ((cons 'a (car '((b) c d))) . (a b))
    ((cons 'a (cdr '((b) c d))) . (a c d))
    ((null? '()) . #t)
    ((null? (quote ())) . #t)
    ((null? '(a b c)) . #f)
    ((null? 'spaghetti) . #f)
    ((atom? 'Harry) . #t)
    ((atom? '(Harry had a heap of apples)) . #f)
    ((atom? (car '(Harry had a heap of apples))) . #t)
    ((atom? (cdr '(Harry had a heap of apples))) . #f)
    ((atom? (cdr '(Harry))) . #f)
    ((atom? (car (cdr '(swing low sweet cherry oat)))) . #t)
    ((atom? (car (cdr '(swing (low sweet) cherry oat)))) . #f)
    ((eq? 'Harry 'Harry) . #t)
    ((eq? 'margarine 'butter) . #f)
    ((eq? '() '(strawberry)) . #f)
    ((eq? 6 7) . #f)
    ((eq? (car '(Mary had a little lamb chop)) 'Mary) . #t)
    ((eq? (cdr '(soured milk)) 'milk) . #f)
    ((let ((l '(beans beans we need jelly beans)))
       (eq? (car l) (car (cdr l)))) . #t)
    ))