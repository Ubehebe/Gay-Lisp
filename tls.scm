(define (atom? x) (not (or (pair? x) (null? x))))

(define (run-tests tests)
  (define (run-tests-tail tests num-tests num-failures)
    (if (null? tests)
	(begin (display num-tests)
	       (display " tests, ")
	       (display num-failures)
	       (display " failures")
	       (display #\newline))
	(let* ((cur-test (car tests))
	       (input (car cur-test))
	       (expected-output (cdr cur-test))
	       (actual-output (eval input (interaction-environment))))
	  (if (equal? expected-output actual-output)
	      (run-tests-tail (cdr tests) (+ 1 num-tests) num-failures)
	      (begin (display "error evaluating ")
		     (display input)
		     (display ": expected ")
		     (display expected-output)
		     (display ", got ")
		     (display actual-output)
		     (display #\newline)
		     (run-tests-tail
		      (cdr tests)
		      (+ 1 num-tests)
		      (+ 1 num-failures)))))))
  (run-tests-tail tests 0 0))

(define ch1-tests
  '(
    ((atom? 'atom) . #t)
    ((atom? 'turkey) . #t)
    ((atom? 1492) . #t)
    ((atom? 'u) . #t)
    ((atom? '*abc$) . #t)
    ((list? '(atom)) . #t)
    ((list? '(atom turkey or)) . #t)
    ((list? '((atom turkey) or)) . #t)
    ((length '(how are you doing so far)) . 6)
    ((list? '(((how) are) ((you) (doing so)) far)) . #t)
    ((length '(((how) are) ((you) (doing so)) far)) . 3)
    ((list? '()) . #t)
    ((atom? '()) . #f)
    ((list? '(() () () ())) . #t)
    ((car '(a b c)) . a)
    ((car '((a b c) x y z)) . (a b c))
					;((car 'hotdog) . 'error)
					;((car '()) . 'error)
    ((car '(((hotdogs)) (and) (pickle) relish)) . ((hotdogs)))
    ((car (car '(((hotdogs)) (and)))) . (hotdogs))
    ((cdr '(a b c)) . (b c))
    ((cdr '((a b c) x y z)) . (x y z))
					;  ((cdr 'hamburger) . 'error)
    ((cdr '((x) t r)) . (t r))
					;  ((cdr 'hotdogs) . 'error)
					;  ((cdr '()) . 'error)
    ((car (cdr '((b) (x y) ((c))))) . (x y))
    ((cdr (cdr '((b) (x y) ((c))))) . (((c))))
					;  ((cdr (car '(a (b (c)) d))) . 'error)
    ((cons 'peanut '(butter and jelly)) . (peanut butter and jelly))
    ((cons '(banana and) '(peanut butter and jelly)) . ((banana and) peanut butter and jelly))
    ((cons '((help) this) '(is very ((hard) to learn))) . (((help) this) is very ((hard) to learn)))
    ((cons '(a b (c)) '()) . ((a b (c))))
    ((cons 'a '()) . (a))
    ((cons '((a b c)) 'b) . (((a b c)) . b))
    ((cons 'a 'b) . (a . b))
    ((cons 'a (car '((b) c d))) . (a b))
    ((cons 'a (cdr '((b) c d))) . (a c d))
    ((null? '()) . #t)
    ((null? (quote ())) . #t)
    ((null? '(a b c)) . #f)
    ((null? 'spaghetti) . #f)
    ((atom? 'Harry) . #t)
    ((atom? '(Harry had a heap of apples)) . #f)
    ((atom? (car '(Harry had a heap of apples))) . #t)
    ((atom? (cdr '(Harry had a heap of apples))) . #f)
    ((atom? (cdr '(Harry))) . #f)
    ((atom? (car (cdr '(swing low sweet cherry oat)))) . #t)
    ((atom? (car (cdr '(swing (low sweet) cherry oat)))) . #f)
    ((eq? 'Harry 'Harry) . #t)
    ((eq? 'margarine 'butter) . #f)
    ((eq? '() '(strawberry)) . #f)
    ((eq? 6 7) . #f)
    ((eq? (car '(Mary had a little lamb chop)) 'Mary) . #t)
    ((eq? (cdr '(soured milk)) 'milk) . #f)
    ((let ((l '(beans beans we need jelly beans)))
       (eq? (car l) (car (cdr l)))) . #t)
    ))


					; todo bl -- integrate within tests
(define (all? pred? xs)
  (cond
   ((null? xs) #t)
   ((pred? (car xs)) (all? pred? (cdr xs)))
   (else #f)))
(define (lat? l)
  (all? atom? l))
(define (member? x ys)
  (cond
   ((null? ys) #f)
   ((eq? x (car ys)) #t)
   (else (member? x (cdr ys)))))

(define ch2-tests
  '(
    ((lat? '(Jack Sprat could eat no chicken fat)) . #t)
    ((lat? '((Jack) Sprat could eat no chicken fat)) . #f)
    ((lat? '(Jack (Sprat could) eat no chicken fat)) . #f)
    ((lat? '()) . #t)
    ((lat? '(bacon and eggs)) . #t)
    ((lat? '(bacon (and eggs))) . #f)
    ((or (null? '()) (atom? '(d e f g))) . #t)
    ((or (null? '(a b c)) (null? '())) . #t)
    ((or (null? '(a b c)) (null? '(atom))) . #f)
    ((member? 'tea '(coffee tea or milk)) . #t)
    ((member? 'poached '(fried eggs and scrambled eggs)) . #f)
    ((member? 'meat '(mashed potatoes and meat gravy)) . #t)
    ((member? 'liver '(bagels and lox)) . #f)
    ))

(define (rember x ys)
  (cond
   ((null? ys) ys)
   ((eq? x (car ys)) (cdr ys))
   (else (cons
	  (car ys)
	  (rember x (cdr ys))))))

(define (filter pred? xs)
  (if (null? xs)
      '()
      (let ((cur (car xs))
	    (rest (cdr xs)))
	(if (pred? cur)
	    (cons cur (filter pred? rest))
	    (filter pred? rest)))))

(define (multirember x ys)
  (filter (lambda (y) (not (eq? x y))) ys))

(define (firsts lists)
  (map car lists))

(define (insertR new old list)
  (if (null? list)
      '()
      (let ((cur (car list)))
	(if (eq? old cur)
	    (cons (car list)
		  (cons new
			(cdr list)))
	    (cons (car list)
		  (insertR new old (cdr list)))))))

(define (subst new old list)
  (if (null? list)
      '()
      (let ((cur (car list)))
	(if (eq? cur old)
	    (cons new (cdr list))
	    (cons cur (subst new old (cdr list)))))))

(define (subst2 new old1 old2 list)
  (if (null? list)
      '()
      (let ((cur (car list)))
	(if (or (eq? cur old1)
		(eq? cur old2))
	    (cons new (cdr list))
	    (cons cur (subst2 old1 old2 (cdr list)))))))

;; (define (multiinsertR new old list)
;;   (if (null? list)
;;       '()
;;       (let ((cur (car list))
;; 	    (rest (cdr list)))
;; 	(if (eq? cur old)
;; 	    (cons old
;; 		  (cons new
;; 			(multiinsertR new old rest)))
;; 	    (multiinsertR new old rest)))))

(define ch3-tests
  '(
    ((rember 'mint '(lamb chops and mint jelly)) . (lamb chops and jelly))
    ((rember 'mint '(lamb chops and mint flavored jelly)) . (lamb chops and flavored jelly))
    ((rember 'toast '(bacon lettuce and tomato)) . (bacon lettuce and tomato))
    ((rember 'cup '(coffee cup tea cup and hick cup)) . (coffee tea cup and hick cup))
    ((firsts '((apple peach pumpkin)
	       (plum pear cherry)
	       (grape raisin pea)
	       (bean carrot eggplant))) . (apple plum grape bean))
    ((firsts '((a b) (c d) (e f))) . (a c e))
    ((firsts '()) . ())
    ((firsts '((five plums)
	       (four)
	       (eleven green oranges))) . (five four eleven))
    ((firsts '(((five plums) four)
	       (eleven green oranges)
	       ((no) more))) . ((five plums) eleven (no)))
    ((insertR 'topping 'fudge '(ice cream with fudge for dessert))
     . (ice cream with fudge topping for dessert))
    ((insertR 'jalapeno 'and '(tacos tamales and salsa))
     . (tacos tamales and jalapeno salsa))
    ((insertR 'e 'd '(a b c d f g d h))
     . (a b c d e f g d h))
    ((subst 'topping 'fudge '(ice cream with fudge for dessert))
     . (ice cream with topping for dessert))
    ((subst2
      'vanilla
      'chocolate
      'banana
      '(banana ice cream with chocolate topping))
     . (vanilla ice cream with chocolate topping))
    ((multirember 'cup '(coffee cup tea cup and hick cup))
     . (coffee tea and hick))
    ))

(define (add1 x) (+ x 1))
(define (sub1 x) (if (zero? x) 0 (- x 1)))
(define (add x y)
  (if (zero? y)
      x
      (add1 (add x (sub1 y)))))
(define (sub x y)
  (if (zero? y)
      x
      (sub1 (sub x (sub1 y)))))
(define (times x y)
  (if (zero? y)
      0
      (add x (times x (sub1 y)))))
(define (tup? xs)
  (all? number? xs))
(define (addtup xs)
  (apply + xs))
(define (zip xs ys)
  (if (or (null? xs) (null? ys))
      '()
      (cons (list (car xs) (car ys))
	    (zip  (cdr xs) (cdr ys)))))

(define (tup+ xs ys)
  (map (lambda (l) (add (car l) (cadr l)))
       (zip xs ys)))

(define (gt? x y)
  (cond
   ((zero? x) #f)
   ((zero? y) #t)
   (else (gt? (sub1 x) (sub1 y)))))

(define (leq? x y)
  (not (gt? x y)))

(define (lt? x y)
  (gt? y x))

(define (geq? x y)
  (leq? y x))

					;(define (eq? x y)
					; (and (geq? x y)
					;     (not (gt? x y))))

(define (pow x y)
  (if (zero? y)
      1
      (times x (pow x (sub1 y)))))

(define (quo x y)
  (if (lt? x y)
      0
      (add1 (quo (sub x y) y))))

(define (pick n xs)
  (if (zero? n)
      (car xs)
      (pick (sub1 n) (cdr xs))))

(define (rempick n xs)
  (if (zero? n)
      (cdr xs)
      (cons (car xs)
	    (rempick (sub1 n) (cdr xs)))))

(define (no-nums xs)
  (filter (lambda (x) (not (number? x))) xs))

(define (occur x ys)
  (if (null? ys)
      0
      (let ((cur (car ys))
	    (rest (cdr ys)))
	(if (eq? x cur)
	    (add1 (occur x rest))
	    (occur x rest)))))

(define ch4-tests
  '(
    ((atom? 14) . #t)
    ((number? -3) . #t)
    ((number? 3.14159) . #t)
    ((add1 67) . 68)
    ((sub1 5) . 4)
    ((sub1 0) . 0)
    ((zero? 0) . #t)
    ((zero? 1492) . #f)
    ((add 46 12) . 58)
    ((sub 14 3) . 11)
    ((sub 17 9) . 8)
    ((sub 18 25) . 0)
    ((tup? '(2 11 3 79 47 6)) . #t)
    ((tup? '(8 55 5 555)) . #t)
    ((tup? '(1 2 8 apple 4 3)) . #f)
    ((tup? '(3 (7 4) 13 9)) . #f)
    ((tup? '()) . #t)
    ((addtup '(3 5 2 8)) . 18)
    ((addtup '(15 6 7 12 3)) . 43)
    ((times 5 3) . 15)
    ((times 13 4) . 52)
    ((times 12 3) . 36)
    ((tup+ '(3 6 9 11 4) '(8 5 2 0 7)) . (11 11 11 11 11))
    ((tup+ '(2 3) '(4 6)) . (6 9))
    ((tup+ '(3 7) '(4 6)) . (7 13))
    ((gt? 12 133) . #f)
    ((gt? 120 11) . #t)
    ((lt? 4 6) . #t)
    ((lt? 8 3) . #f)
    ((lt? 6 6) . #f)
    ((pow 1 1) . 1)
    ((pow 2 3) . 8)
    ((pow 5 3) . 125)
    ((quo 15 4) . 3)
    ((length '(hotdogs with mustard sauerkraut and pickles))
     . 6)
    ((length '(ham and cheese on rye)) . 5)
    ((pick 3 '(lasagna spaghetti ravioli macaroni meatball))
     . macaroni)
    ((rempick 2 '(hotdogs with hot mustard))
     . (hotdogs with mustard))
    ((number? 'tomato) . #f)
    ((number? 76) . #t)
    ((no-nums '(5 pears 6 prunes 9 dates)) . (pears prunes dates))
    ((rempick 2 '(lemon meringue salty pie))
     . (lemon meringue pie))
    ))

(define (rember* x ys)
  (filter* (lambda (y) (not (eq? x y))) ys))

(define (insertR* new old xs)
  (if (null? xs)
      '()
      (let ((cur (car xs))
	    (rest (insertR* new old (cdr xs))))
	(cond ((list? cur)
	       (cons (insertR* new old cur)
		     rest))
	      ((eq? cur old)
	       (cons cur
		     (cons new rest)))
	      (else  (cons cur rest))))))

					; tedious
(define (insertL* new old xs)
  (if (null? xs)
      '()
      (let ((cur (car xs))
	    (rest (insertL* new old (cdr xs))))
	(cond ((list? cur)
	       (cons (insertL* new old cur)
		     rest))
	      ((eq? cur old)
	       (cons new
		     (cons cur rest)))
	      (else  (cons cur rest))))))

(define (filter* pred? xs)
  (if (null? xs)
      '()
      (let ((cur (car xs))
	    (rest (filter* pred? (cdr xs))))
	(cond ((list? cur)
	       (cons (filter* pred? cur) rest))
	      ((pred? cur)
	       (cons cur rest))
	      (else
	       rest)))))

(define (map* f xs)
  (if (null? xs)
      '()
      (let ((cur (car xs))
	    (rest (map* f (cdr xs))))
	(if (list? cur)
	    (cons (map* f cur) rest)
	    (cons (f cur) rest)))))

(define (reduce* op start xs)
  (if (null? xs)
      start
      (let ((cur  (car xs))
	    (rest (reduce* op start (cdr xs))))
	(if (list? cur)
	    (op (reduce* op start cur) rest)
	    (op cur rest)))))

(define (occurs* x ys)
  (map* (lambda (y) (if (eq? x y) 1 0)) ys))

(define (subst* new old xs)
  (map* (lambda (x) (if (eq? old x) new x)) xs))

(define (ch5-tests)
  '(
    ((rember*
      'cup
      '((coffee) cup ((tea) cup)
	(and (hick)) cup))
     . ((coffee) ((tea)) (and (hick))))
    ((rember*
      'sauce
      '(((tomato sauce))
	((bean sauce))
	(and ((flying)) sauce)))
     . (((tomato)) ((bean)) (and ((flying)))))
    ))

(define (numbered? expr)
  (cond
   ((number? expr) #t)
   ((or
     (eq? expr +)
     (eq? expr -)
     (eq? expr *)
     (eq? expr /)
     (eq? expr ^) #t))
   (else (and (list? expr) (all numbered? expr)))))


(define ch6-tests
  '(
    ((quote a) . a)
    ((quote +) . +)
    ((quote *) . *)
    ((eq? (quote a) 'a) . #t)
    ((eq? 'a 'a) . #t)
    ((numbered? 1) . #t)
    ((numbered? '(3 + (4 ^ 5))) . #t)
    ((numbered? '(2 * sausage)) . #f)
    ))

